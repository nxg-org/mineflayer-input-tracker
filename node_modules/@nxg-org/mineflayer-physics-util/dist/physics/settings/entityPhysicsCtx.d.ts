import { AABB } from "@nxg-org/mineflayer-util-plugin";
import md from "minecraft-data";
import type { Bot } from "mineflayer";
import { Entity } from "prismarine-entity";
import { Vec3 } from "vec3";
import { IPhysics } from "../engines/IPhysics";
import { EntityState } from "../states/entityState";
import { PlayerPoses } from "../states/poses";
export declare const emptyVec: Vec3;
declare type PlayerPoseContext = {
    [key in PlayerPoses]: {
        width: number;
        height: number;
    };
};
declare type CollisionContext = {
    blockEffects: boolean;
    affectedAfterCollision: boolean;
};
export declare class EPhysicsCtx {
    ctx: IPhysics;
    pose: PlayerPoses;
    readonly state: EntityState;
    readonly entityType: md.Entity;
    static loadData: (data: md.IndexedData) => void;
    static entityConstructor: new (id: number) => Entity;
    static mcData: md.IndexedData;
    static entityData: md.IndexedData["entitiesByName"];
    static mobData: md.IndexedData["mobs"];
    /**
     * From minecraft's Player.java file.
     */
    static readonly playerPoseContext: PlayerPoseContext;
    readonly position: Vec3;
    readonly velocity: Vec3;
    readonly stepHeight: number;
    readonly gravity: number;
    readonly waterGravity: number;
    readonly lavaGravity: number;
    readonly airdrag: number;
    readonly airborneInertia: number;
    readonly airborneAccel: number;
    readonly waterInertia: number;
    readonly lavaInertia: number;
    readonly liquidAccel: number;
    readonly gravityThenDrag: boolean;
    readonly useControls: boolean;
    readonly collisionBehavior: CollisionContext;
    constructor(ctx: IPhysics, pose: PlayerPoses, state: EntityState, entityType?: md.Entity);
    static FROM_BOT(ctx: IPhysics, bot: Bot): EPhysicsCtx;
    static FROM_ENTITY(ctx: IPhysics, entity: Entity): EPhysicsCtx;
    static FROM_ENTITY_TYPE(ctx: IPhysics, entityType: md.Entity, options?: Partial<Entity>): EPhysicsCtx;
    static FROM_ENTITY_STATE(ctx: IPhysics, entityState: EntityState, entityType?: md.Entity): EPhysicsCtx;
    clone(): EPhysicsCtx;
    get height(): number;
    get width(): number;
    getHalfWidth(): number;
    getCurrentBBWithPose(): AABB;
    getBBWithPose(position: {
        x: number;
        y: number;
        z: number;
    }): AABB;
    getBB(position: {
        x: number;
        y: number;
        z: number;
    }): AABB;
}
export {};
