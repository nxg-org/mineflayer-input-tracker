"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UtilFunctions = void 0;
const entityFunctions_1 = require("./entityFunctions");
const filterFunctions_1 = require("./filterFunctions");
const inventoryFunctions_1 = require("./inventoryFunctions");
const movementFunctions_1 = require("./movementFunctions");
const util_1 = require("util");
const predictiveFunctions_1 = require("./predictiveFunctions");
const mathUtil_1 = require("./mathUtil");
const WorldFunctions_1 = require("./WorldFunctions");
const rayTracingFunctions_1 = require("./rayTracingFunctions");
/**
 * I don't believe I need any locks, as I'm only going to have one instance of this per bot.
 * This is added to bot context so multiple instances will exist in memory.
 * Therefore, I don't need this. https://www.npmjs.com/package/async-lock
 */
/**
 * I may add listeners to this class, as halting until an item is equipped may be good.
 */
/**
 * I can't inherit from multiple classes. This language sucks.
 * I'm not using mixins. Fuck you, fuck that.
 * I'm just going to segregate these functions into separate categories
 * because once again, fuck you.
 *
 */
class UtilFunctions {
    constructor(bot) {
        this.bot = bot;
        this.sleep = (0, util_1.promisify)(setTimeout);
        this.inv = new inventoryFunctions_1.InventoryFunctions(bot);
        this.move = new movementFunctions_1.MovementFunctions(bot);
        this.entity = new entityFunctions_1.EntityFunctions(bot);
        this.predict = new predictiveFunctions_1.PredictiveFunctions(bot);
        this.filters = new filterFunctions_1.FilterFunctions(bot);
        this.world = new WorldFunctions_1.WorldFunctions(bot);
        this.raytrace = new rayTracingFunctions_1.RayTraceFunctions(bot);
        this.math = new mathUtil_1.MathFunctions();
    }
}
exports.UtilFunctions = UtilFunctions;
