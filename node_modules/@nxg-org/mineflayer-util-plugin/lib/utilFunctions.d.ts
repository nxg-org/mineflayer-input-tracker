/// <reference types="node" />
import type { Bot } from "mineflayer";
import { EntityFunctions } from "./entityFunctions";
import { FilterFunctions } from "./filterFunctions";
import { InventoryFunctions } from "./inventoryFunctions";
import { MovementFunctions } from "./movementFunctions";
import { PredictiveFunctions } from "./predictiveFunctions";
import { MathFunctions } from "./mathUtil";
import { WorldFunctions } from "./WorldFunctions";
import { RayTraceFunctions } from "./rayTracingFunctions";
/**
 * I don't believe I need any locks, as I'm only going to have one instance of this per bot.
 * This is added to bot context so multiple instances will exist in memory.
 * Therefore, I don't need this. https://www.npmjs.com/package/async-lock
 */
/**
 * I may add listeners to this class, as halting until an item is equipped may be good.
 */
/**
 * I can't inherit from multiple classes. This language sucks.
 * I'm not using mixins. Fuck you, fuck that.
 * I'm just going to segregate these functions into separate categories
 * because once again, fuck you.
 *
 */
export declare class UtilFunctions {
    bot: Bot;
    inv: InventoryFunctions;
    move: MovementFunctions;
    entity: EntityFunctions;
    predict: PredictiveFunctions;
    filters: FilterFunctions;
    math: MathFunctions;
    world: WorldFunctions;
    raytrace: RayTraceFunctions;
    constructor(bot: Bot);
    sleep: typeof import("timers/promises").setTimeout;
}
